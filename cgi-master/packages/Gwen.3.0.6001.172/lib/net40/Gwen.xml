<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gwen</name>
    </assembly>
    <members>
        <member name="T:Gwen.Align">
            <summary>
            Utility class for manipulating control's position according to its parent. Rarely needed, use control.Dock.
            </summary>
        </member>
        <member name="M:Gwen.Align.Center(Gwen.Control.Base)">
            <summary>
            Centers the control inside its parent.
            </summary>
            <param name="control">Control to center.</param>
        </member>
        <member name="M:Gwen.Align.AlignLeft(Gwen.Control.Base)">
            <summary>
            Moves the control to the left of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.CenterHorizontally(Gwen.Control.Base)">
            <summary>
            Centers the control horizontally inside its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.AlignRight(Gwen.Control.Base)">
            <summary>
            Moves the control to the right of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.AlignTop(Gwen.Control.Base)">
            <summary>
            Moves the control to the top of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.CenterVertically(Gwen.Control.Base)">
            <summary>
            Centers the control vertically inside its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.AlignBottom(Gwen.Control.Base)">
            <summary>
            Moves the control to the bottom of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Gwen.Align.PlaceDownLeft(Gwen.Control.Base,Gwen.Control.Base,System.Int32)">
            <summary>
            Places the control below other control (left aligned), taking margins into account.
            </summary>
            <param name="control">Control to place.</param>
            <param name="anchor">Anchor control.</param>
            <param name="spacing">Optional spacing.</param>
        </member>
        <member name="M:Gwen.Align.PlaceRightBottom(Gwen.Control.Base,Gwen.Control.Base,System.Int32)">
            <summary>
            Places the control to the right of other control (bottom aligned), taking margins into account.
            </summary>
            <param name="control">Control to place.</param>
            <param name="anchor">Anchor control.</param>
            <param name="spacing">Optional spacing.</param>
        </member>
        <member name="T:Gwen.ControlInternal.CategoryButton">
            <summary>
            Item in CollapsibleCategory.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.CategoryButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.CategoryButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.CategoryButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.CategoryButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.CategoryHeaderButton">
            <summary>
            Header of CollapsibleCategory.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.CategoryHeaderButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.CategoryHeaderButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.CategoryHeaderButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.ColorButton">
            <summary>
            Property button.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.ColorButton.Color">
            <summary>
            Current color value.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.ColorButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.ColorButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ColorButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.ColorDisplay">
            <summary>
            Color square.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.ColorDisplay.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.ColorDisplay"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ColorDisplay.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Gwen.ControlInternal.ColorDisplay.Color">
            <summary>
            Current color.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.DownArrow">
            <summary>
            ComboBox arrow.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.DownArrow.#ctor(Gwen.Control.ComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.DownArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.DownArrow.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.MenuDivider">
            <summary>
            Divider menu item.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.MenuDivider.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.MenuDivider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.MenuDivider.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.Modal">
            <summary>
            Modal control for windows.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Modal.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.Modal"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Modal.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Modal.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.Resizer">
            <summary>
            Grab point for resizing.
            </summary>
        </member>
        <member name="E:Gwen.ControlInternal.Resizer.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Resizer.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.Resizer"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Resizer.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="P:Gwen.ControlInternal.Resizer.ResizeDir">
            <summary>
            Gets or sets the sizing direction.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.RightArrow">
            <summary>
            Submenu indicator.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.RightArrow.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.RightArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.RightArrow.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.SliderBar">
            <summary>
            Slider bar.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.SliderBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.SliderBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.SliderBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.SliderBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.SplitterBar">
            <summary>
            Splitter bar.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.SplitterBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.SplitterBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.SplitterBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.SplitterBar.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.TabControlInner">
            <summary>
            Inner panel of tab control.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.TabControlInner.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.TabControlInner"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.TabControlInner.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.TreeNodeLabel">
            <summary>
            Tree node label.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.TreeNodeLabel.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.TreeNodeLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.TreeNodeLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.TreeToggleButton">
            <summary>
            Tree node toggle button (the little plus sign).
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.TreeToggleButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.TreeToggleButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.TreeToggleButton.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.TreeToggleButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.UpDownButton_Down">
            <summary>
            Numeric down arrow.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.UpDownButton_Down.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.UpDownButton_Down"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.UpDownButton_Down.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.UpDownButton_Up">
            <summary>
            Numeric up arrow.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.UpDownButton_Up.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.UpDownButton_Up"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.UpDownButton_Up.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.CloseButton">
            <summary>
            Window close button.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.CloseButton.#ctor(Gwen.Control.Base,Gwen.Control.WindowControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.CloseButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="owner">Window that owns this button.</param>
        </member>
        <member name="M:Gwen.ControlInternal.CloseButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.PropertyRowLabel">
            <summary>
            Label for PropertyRow.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.PropertyRowLabel.#ctor(Gwen.Control.PropertyRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.PropertyRowLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.PropertyRowLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Gwen.ControlInternal.PropertyTreeNode">
            <summary>
            Properties node.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.PropertyTreeNode.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.PropertyTreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.PropertyTreeNode.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.Dragger">
            <summary>
            Base for controls that can be dragged by mouse.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Dragger.IsHeld">
            <summary>
            Indicates if the control is being dragged.
            </summary>
        </member>
        <member name="E:Gwen.ControlInternal.Dragger.Dragged">
            <summary>
            Event invoked when the control position has been changed.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Dragger.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.Dragger"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Dragger.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Dragger.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Dragger.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Gwen.ControlInternal.Highlight" -->
        <member name="M:Gwen.ControlInternal.Highlight.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.Highlight"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Highlight.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.ScrollBarBar">
            <summary>
            Scrollbar bar.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.ScrollBarBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.ScrollBarBar.IsVertical">
            <summary>
            Indicates whether the bar is vertical.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.ScrollBarBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarBar.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarBar.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.ScrollBarButton">
            <summary>
            Scrollbar button.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.ScrollBarButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.ScrollBarButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.ControlInternal.Text">
            <summary>
            Displays text. Always sized to contents.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Text.Font">
            <summary>
            Font used to display the text.
            </summary>
            <remarks>
            The font is not being disposed by this class.
            </remarks>
        </member>
        <member name="P:Gwen.ControlInternal.Text.String">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Text.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Text.Length">
            <summary>
            Text length in characters.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Text.TextColorOverride">
            <summary>
            Text color override - used by tooltips.
            </summary>
        </member>
        <member name="P:Gwen.ControlInternal.Text.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Text.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.ControlInternal.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Text.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Text.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.ControlInternal.Text.OnScaleChanged">
            <summary>
            Handler invoked when control's scale changes.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Text.SizeToContents">
            <summary>
            Sizes the control to its contents.
            </summary>
        </member>
        <member name="M:Gwen.ControlInternal.Text.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character in the text.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character position in local coordinates.</returns>
        </member>
        <member name="M:Gwen.ControlInternal.Text.GetClosestCharacter(System.Drawing.Point)">
            <summary>
            Searches for a character closest to given point.
            </summary>
            <param name="p">Point.</param>
            <returns>Character index.</returns>
        </member>
        <member name="T:Gwen.Control.CollapsibleCategory">
            <summary>
            CollapsibleCategory control. Used in CollapsibleList.
            </summary>
        </member>
        <member name="P:Gwen.Control.CollapsibleCategory.Text">
            <summary>
            Header text.
            </summary>
        </member>
        <member name="P:Gwen.Control.CollapsibleCategory.IsCollapsed">
            <summary>
            Determines whether the category is collapsed (closed).
            </summary>
        </member>
        <member name="E:Gwen.Control.CollapsibleCategory.Selected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Gwen.Control.CollapsibleCategory.Collapsed">
            <summary>
            Invoked when the category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.#ctor(Gwen.Control.CollapsibleList)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CollapsibleCategory"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.GetSelectedButton">
            <summary>
            Gets the selected entry.
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.OnHeaderToggle(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for header button toggle event.
            </summary>
            <param name="control">Source control.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.OnSelected(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.Add(System.String)">
            <summary>
            Adds a new entry.
            </summary>
            <param name="name">Entry name (displayed).</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleCategory.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.CollapsibleList">
            <summary>
            CollapsibleList control. Groups CollapsibleCategory controls.
            </summary>
        </member>
        <member name="E:Gwen.Control.CollapsibleList.ItemSelected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Gwen.Control.CollapsibleList.CategoryCollapsed">
            <summary>
            Invoked when a category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CollapsibleList"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.GetSelectedButton">
            <summary>
            Selected entry.
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.Add(Gwen.Control.CollapsibleCategory)">
            <summary>
            Adds a category to the list.
            </summary>
            <param name="category">Category control to add.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.Add(System.String)">
            <summary>
            Adds a new category to the list.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.OnCategorySelected(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for ItemSelected event.
            </summary>
            <param name="control">Event source: <see cref="T:Gwen.Control.CollapsibleList"/>.</param>
        </member>
        <member name="M:Gwen.Control.CollapsibleList.OnCategoryCollapsed(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for category collapsed event.
            </summary>
            <param name="control">Event source: <see cref="T:Gwen.Control.CollapsibleCategory"/>.</param>
        </member>
        <member name="T:Gwen.Control.DockBase">
            <summary>
            Base for dockable containers.
            </summary>
        </member>
        <member name="P:Gwen.Control.DockBase.LeftDock">
            <summary>
            Control docked on the left side.
            </summary>
        </member>
        <member name="P:Gwen.Control.DockBase.RightDock">
            <summary>
            Control docked on the right side.
            </summary>
        </member>
        <member name="P:Gwen.Control.DockBase.TopDock">
            <summary>
            Control docked on the top side.
            </summary>
        </member>
        <member name="P:Gwen.Control.DockBase.BottomDock">
            <summary>
            Control docked on the bottom side.
            </summary>
        </member>
        <member name="M:Gwen.Control.DockBase.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.DockBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.DockBase.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.DockBase.SetupChildDock(Gwen.Pos)">
            <summary>
            Initializes an inner docked control for the specified position.
            </summary>
            <param name="pos">Dock position.</param>
        </member>
        <member name="M:Gwen.Control.DockBase.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.DockBase.GetChildDock(Gwen.Pos)">
            <summary>
            Gets an inner docked control for the specified position.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.DockBase.GetDroppedTabDirection(System.Int32,System.Int32)">
            <summary>
            Calculates dock direction from dragdrop coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>Dock direction.</returns>
        </member>
        <member name="P:Gwen.Control.DockBase.IsEmpty">
            <summary>
            Indicates whether the control contains any docked children.
            </summary>
        </member>
        <member name="M:Gwen.Control.DockBase.RenderOver(Gwen.Skin.Base)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.DockedTabControl">
            <summary>
            Docked tab control.
            </summary>
        </member>
        <member name="P:Gwen.Control.DockedTabControl.TitleBarVisible">
            <summary>
            Determines whether the title bar is visible.
            </summary>
        </member>
        <member name="M:Gwen.Control.DockedTabControl.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.DockedTabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.DockedTabControl.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.HasSelection">
            <summary>
            Indicates whether the text has active selection.
            </summary>
        </member>
        <member name="E:Gwen.Control.MultilineTextBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.CursorPosition">
            <summary>
            Get a point representing where the cursor physically appears on the screen.
            Y is line number, X is character position on that line.
            </summary>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.CursorEnd">
            <summary>
            Get a point representing where the endpoint of text selection.
            Y is line number, X is character position on that line.
            </summary>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.AcceptTabs">
            <summary>
            Indicates whether the control will accept Tab characters as input.
            </summary>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.TotalLines">
            <summary>
            Returns the number of lines that are in the Multiline Text Box.
            </summary>
        </member>
        <member name="P:Gwen.Control.MultilineTextBox.Text">
            <summary>
            Gets and sets the text to display to the user. Each line is seperated by
            an Environment.NetLine character.
            </summary>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TextBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.ScrollChanged(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Refreshes the cursor location and selected area when the inner panel scrolls
            </summary>
            <param name="control">The inner panel the text is embedded in</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.InsertText(System.String)">
            <summary>
            Inserts text at current cursor position, erasing selection if any.
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnPaste(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnCopy(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnCut(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnSelectAll(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnKeyTab(System.Boolean)">
            <summary>
            Handler for Tab Key keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.GetSelection">
            <summary>
            Returns currently selected text.
            </summary>
            <returns>Current selection.</returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.EraseSelection">
            <summary>
            Deletes selected text.
            </summary>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.GetClosestCharacter(System.Int32,System.Int32)">
            <summary>
            Returns index of the character closest to specified point (in canvas coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.OnChildBoundsChanged(System.Drawing.Rectangle,Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
            <param name="oldChildBounds"></param>
            <param name="child"></param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.SetText(System.String,System.Boolean)">
            <summary>
            Sets the label text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Gwen.Control.MultilineTextBox.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
            <remarks>
            Causes layout, repaint, invalidates cached texture.
            </remarks>
        </member>
        <member name="E:Gwen.Control.VerticalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Gwen.Control.VerticalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Gwen.Control.VerticalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.SetPanel(System.Int32,Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Gwen.Control.VerticalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Gwen.Control.Layout.Positioner">
            <summary>
            Helper control that positions its children in a specific way.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.Positioner.Pos">
            <summary>
            Children position.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.Positioner.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Layout.Positioner"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Positioner.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.Layout.Center">
            <summary>
            Helper class that centers all its children.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.Center.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Layout.Center"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Gwen.Control.Layout.Splitter">
            <summary>
            Base splitter class.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.Splitter.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Layout.Splitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Splitter.SetPanel(System.Int32,Gwen.Control.Base,System.Boolean)">
            <summary>
            Sets the contents of a splitter panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <param name="panel">Panel contents.</param>
            <param name="noScale">Determines whether the content is to be scaled.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Splitter.GetPanel(System.Int32)">
            <summary>
            Gets the contents of a secific panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.Layout.Splitter.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.Layout.Table">
            <summary>
            Base class for multi-column tables.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.Table.ColumnCount">
            <summary>
            Column count (default 1).
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.Table.RowCount">
            <summary>
            Row count.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.Table.DefaultRowHeight">
            <summary>
            Gets or sets default height for new table rows.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.Table.Item(System.Int32)">
            <summary>
            Returns specific row of the table.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.Table.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Layout.Table"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="count">Number of columns.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column width.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.Table.AddRow">
            <summary>
            Adds a new empty row.
            </summary>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.Table.AddRow(Gwen.Control.Layout.TableRow)">
            <summary>
            Adds a new row.
            </summary>
            <param name="row">Row to add.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.AddRow(System.String)">
            <summary>
            Adds a new row with specified text in first column.
            </summary>
            <param name="text">Text to add.</param>
            <returns>New row.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.Table.RemoveRow(Gwen.Control.Layout.TableRow)">
            <summary>
            Removes a row by reference.
            </summary>
            <param name="row">Row to remove.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.RemoveRow(System.Int32)">
            <summary>
            Removes a row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.RemoveAll">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.Table.GetRowIndex(Gwen.Control.Layout.TableRow)">
            <summary>
            Gets the index of a specified row.
            </summary>
            <param name="row">Row to search for.</param>
            <returns>Row index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.Table.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Layout.Table.SizeToContents(System.Int32)">
            <summary>
            Sizes to fit contents.
            </summary>
        </member>
        <member name="T:Gwen.Control.Layout.TableRow">
            <summary>
            Single table row.
            </summary>
        </member>
        <member name="E:Gwen.Control.Layout.TableRow.Selected">
            <summary>
            Invoked when the row has been selected.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.TableRow.ColumnCount">
            <summary>
            Column count.
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.TableRow.EvenRow">
            <summary>
            Indicates whether the row is even or odd (used for alternate coloring).
            </summary>
        </member>
        <member name="P:Gwen.Control.Layout.TableRow.Text">
            <summary>
            Text of the first column.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Layout.TableRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="columnCount">Number of columns.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SetCellText(System.Int32,System.String)">
            <summary>
            Sets the text of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SetCellContents(System.Int32,Gwen.Control.Base,System.Boolean)">
            <summary>
            Sets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <param name="control">Cell contents.</param>
            <param name="enableMouseInput">Determines whether mouse input should be enabled for the cell.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.GetCellContents(System.Int32)">
            <summary>
            Gets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <returns>Control embedded in the cell.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SizeToContents">
            <summary>
            Sizes all cells to fit contents.
            </summary>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.SetTextColor(System.Drawing.Color)">
            <summary>
            Sets the text color for all cells.
            </summary>
            <param name="color">Text color.</param>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.GetText(System.Int32)">
            <summary>
            Returns text of a specified row cell (default first).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column cell text.</returns>
        </member>
        <member name="M:Gwen.Control.Layout.TableRow.OnCopy(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="T:Gwen.Control.MessageBox">
            <summary>
            Simple message box.
            </summary>
        </member>
        <member name="F:Gwen.Control.MessageBox.Dismissed">
            <summary>
            Invoked when the message box has been dismissed.
            </summary>
        </member>
        <member name="M:Gwen.Control.MessageBox.#ctor(Gwen.Control.Base,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.MessageBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Window caption.</param>
        </member>
        <member name="M:Gwen.Control.MessageBox.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.ProgressBar">
            <summary>
            Progress bar.
            </summary>
        </member>
        <member name="P:Gwen.Control.ProgressBar.IsHorizontal">
            <summary>
            Determines whether the control is horizontal.
            </summary>
        </member>
        <member name="P:Gwen.Control.ProgressBar.Value">
            <summary>
            Progress value (0-1).
            </summary>
        </member>
        <member name="P:Gwen.Control.ProgressBar.AutoLabel">
            <summary>
            Determines whether the label text is autogenerated from value.
            </summary>
        </member>
        <member name="M:Gwen.Control.ProgressBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ProgressBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ProgressBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.Properties">
            <summary>
            Properties table.
            </summary>
        </member>
        <member name="P:Gwen.Control.Properties.SplitWidth">
            <summary>
            Returns the width of the first column (property names).
            </summary>
        </member>
        <member name="E:Gwen.Control.Properties.ValueChanged">
            <summary>
            Invoked when a property value has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.Properties.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Properties"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Properties.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Properties.OnSplitterMoved(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handles the splitter moved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.Properties.Add(System.String,System.String)">
            <summary>
            Adds a new text property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Gwen.Control.Properties.Add(System.String,Gwen.Control.Property.Base,System.String)">
            <summary>
            Adds a new property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="prop">Property control.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Gwen.Control.Properties.DeleteAll">
            <summary>
            Deletes all rows.
            </summary>
        </member>
        <member name="T:Gwen.Control.PropertyRow">
            <summary>
            Single property row.
            </summary>
        </member>
        <member name="E:Gwen.Control.PropertyRow.ValueChanged">
            <summary>
            Invoked when the property value has changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.PropertyRow.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Gwen.Control.PropertyRow.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Gwen.Control.PropertyRow.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Gwen.Control.PropertyRow.Label">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="M:Gwen.Control.PropertyRow.#ctor(Gwen.Control.Base,Gwen.Control.Property.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.PropertyRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="prop">Property control associated with this row.</param>
        </member>
        <member name="M:Gwen.Control.PropertyRow.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.PropertyRow.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.PropertyTree">
            <summary>
            Property table/tree.
            </summary>
        </member>
        <member name="M:Gwen.Control.PropertyTree.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.PropertyTree"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.PropertyTree.Add(System.String)">
            <summary>
            Adds a new properties node.
            </summary>
            <param name="label">Node label.</param>
            <returns>Newly created control</returns>
        </member>
        <member name="T:Gwen.Control.Property.Base">
            <summary>
            Base control for property entry.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Base.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Property.Base"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="E:Gwen.Control.Property.Base.ValueChanged">
            <summary>
            Invoked when the property value has been changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.Property.Base.Value">
            <summary>
            Property value (todo: always string, which is ugly. do something about it).
            </summary>
        </member>
        <member name="P:Gwen.Control.Property.Base.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Base.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="T:Gwen.Control.Property.Check">
            <summary>
            Checkable property.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Check.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Property.Check"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Gwen.Control.Property.Check.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Check.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Gwen.Control.Property.Check.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Gwen.Control.Property.Check.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="T:Gwen.Control.Property.Color">
            <summary>
            Color property.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Color.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Property.Color"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Property.Color.OnButtonPressed(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Color-select button press handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.Property.Color.OnColorChanged(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Color changed handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="P:Gwen.Control.Property.Color.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Color.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Gwen.Control.Property.Color.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="T:Gwen.Control.Property.Text">
            <summary>
            Text property.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Text.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Property.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Gwen.Control.Property.Text.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="M:Gwen.Control.Property.Text.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Gwen.Control.Property.Text.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Gwen.Control.Property.Text.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="T:Gwen.Control.ResizableControl">
            <summary>
            Base resizable control.
            </summary>
        </member>
        <member name="P:Gwen.Control.ResizableControl.ClampMovement">
            <summary>
            Determines whether control's position should be restricted to its parent bounds.
            </summary>
        </member>
        <member name="E:Gwen.Control.ResizableControl.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="M:Gwen.Control.ResizableControl.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ResizableControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ResizableControl.OnResized(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the resized event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.ResizableControl.DisableResizing">
            <summary>
            Disables resizing.
            </summary>
        </member>
        <member name="M:Gwen.Control.ResizableControl.EnableResizing">
            <summary>
            Enables resizing.
            </summary>
        </member>
        <member name="M:Gwen.Control.ResizableControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Gwen.Control.ResizableControl.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the control size.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="T:Gwen.Control.RichLabel">
            <summary>
            Multiline label with text chunks having different color/font.
            </summary>
        </member>
        <member name="M:Gwen.Control.RichLabel.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.RichLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.RichLabel.AddLineBreak">
            <summary>
            Adds a line break to the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.RichLabel.AddText(System.String,System.Drawing.Color,Gwen.Font)">
            <summary>
            Adds text to the control.
            </summary>
            <param name="text">Text to add.</param>
            <param name="color">Text color.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="M:Gwen.Control.RichLabel.SizeToChildren(System.Boolean,System.Boolean)">
            <summary>
            Resizes the control to fit its children.
            </summary>
            <param name="width">Determines whether to change control's width.</param>
            <param name="height">Determines whether to change control's height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Gwen.Control.RichLabel.OnBoundsChanged(System.Drawing.Rectangle)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Gwen.Control.RichLabel.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.StatusBar">
            <summary>
            Status bar.
            </summary>
        </member>
        <member name="M:Gwen.Control.StatusBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.StatusBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.StatusBar.AddControl(Gwen.Control.Base,System.Boolean)">
            <summary>
            Adds a control to the bar.
            </summary>
            <param name="control">Control to add.</param>
            <param name="right">Determines whether the control should be added to the right side of the bar.</param>
        </member>
        <member name="M:Gwen.Control.StatusBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.TabStrip">
            <summary>
            Tab strip - groups TabButtons and allows reordering.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabStrip.AllowReorder">
            <summary>
            Determines whether it is possible to reorder tabs by mouse dragging.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabStrip.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="M:Gwen.Control.TabStrip.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TabStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Gwen.Control.TabStrip.StripPosition">
            <summary>
            Strip position (top/left/right/bottom).
            </summary>
        </member>
        <member name="M:Gwen.Control.TabStrip.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.TabButton">
            <summary>
            Tab header.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabButton.IsActive">
            <summary>
            Indicates whether the tab is active.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabButton.Page">
            <summary>
            Interior of the tab.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabButton.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="M:Gwen.Control.TabButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TabButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TabButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TabButton.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TabButton.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TabButton.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TabButton.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TabButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Gwen.Control.ColorPicker">
            <summary>
            RGBA color picker.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorPicker.R">
            <summary>
            Red value of the selected color.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorPicker.G">
            <summary>
            Green value of the selected color.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorPicker.B">
            <summary>
            Blue value of the selected color.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorPicker.A">
            <summary>
            Alpha value of the selected color.
            </summary>
        </member>
        <member name="E:Gwen.Control.ColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorPicker.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ColorPicker.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Gwen.Control.ColorPicker.AlphaVisible">
            <summary>
            Determines whether the Alpha control is visible.
            </summary>
        </member>
        <member name="T:Gwen.Control.Base">
            <summary>
            Base control class.
            </summary>
        </member>
        <member name="T:Gwen.Control.Base.GwenEventHandler`1">
            <summary>
            Delegate used for all control event handlers.
            </summary>
            <param name="control">Event source.</param>
            <param name="args" >Additional arguments. May be empty (EventArgs.Empty).</param>
        </member>
        <member name="F:Gwen.Control.Base.m_ActualParent">
            <summary>
            This is the panel's actual parent - most likely the logical 
            parent's InnerPanel (if it has one). You should rarely need this.
            </summary>
        </member>
        <member name="F:Gwen.Control.Base.m_InnerPanel">
            <summary>
            If the innerpanel exists our children will automatically become children of that 
            instead of us - allowing us to move them all around by moving that panel (useful for scrolling etc).
            </summary>
        </member>
        <member name="F:Gwen.Control.Base.m_Children">
            <summary>
            Real list of children.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.HoverEnter">
            <summary>
            Invoked when mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.HoverLeave">
            <summary>
            Invoked when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.BoundsChanged">
            <summary>
            Invoked when control's bounds have been changed.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.Clicked">
            <summary>
            Invoked when the control has been left-clicked.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.DoubleClicked">
            <summary>
            Invoked when the control has been double-left-clicked.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.RightClicked">
            <summary>
            Invoked when the control has been right-clicked.
            </summary>
        </member>
        <member name="E:Gwen.Control.Base.DoubleRightClicked">
            <summary>
            Invoked when the control has been double-right-clicked.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ClickEventAssigned">
            <summary>
            Returns true if any on click events are set.
            </summary>
        </member>
        <member name="F:Gwen.Control.Base.m_Accelerators">
            <summary>
            Accelerator map.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Children">
            <summary>
            Logical list of children. If InnerPanel is not null, returns InnerPanel's children.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Parent">
            <summary>
            The logical parent. It's usually what you expect, the control you've parented it to.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Dock">
            <summary>
            Dock position.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Skin">
            <summary>
            Current skin.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ToolTip">
            <summary>
            Current tooltip.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsMenuComponent">
            <summary>
            Indicates whether this control is a menu component.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Padding">
            <summary>
            Current padding - inner spacing.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Margin">
            <summary>
            Current margin - outer spacing.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.UserData">
            <summary>
            User data associated with the control.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.HasFocus">
            <summary>
            Indicates whether the control has focus.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsDisabled">
            <summary>
            Indicates whether the control is disabled.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsHidden">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.RestrictToParent">
            <summary>
            Determines whether the control's position should be restricted to parent's bounds.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.MouseInputEnabled">
            <summary>
            Determines whether the control receives mouse input events.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.KeyboardInputEnabled">
            <summary>
            Determines whether the control receives keyboard input events.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Cursor">
            <summary>
            Gets or sets the mouse cursor when the cursor is hovering the control.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsTabable">
            <summary>
            Indicates whether the control is tabable (can be focused by pressing Tab).
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ShouldDrawBackground">
            <summary>
            Indicates whether control's background should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ShouldCacheToTexture">
            <summary>
            Indicates whether the renderer should cache drawing to a texture to improve performance (at the cost of memory).
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Name">
            <summary>
            Gets or sets the control's internal name.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Bounds">
            <summary>
            Control's size and position relative to the parent.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.RenderBounds">
            <summary>
            Bounds for the renderer.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.InnerBounds">
            <summary>
            Bounds adjusted by padding.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.MinimumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.MaximumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.ShouldDrawHover">
            <summary>
            Determines whether hover should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.IsVisible">
            <summary>
            Indicates whether the control and its parents are visible.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.X">
            <summary>
            Leftmost coordinate of the control.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.Y">
            <summary>
            Topmost coordinate of the control.
            </summary>
        </member>
        <member name="P:Gwen.Control.Base.DrawDebugOutlines">
            <summary>
            Determines whether margin, padding and bounds outlines for the control will be drawn. Applied recursively to all children.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Base"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.DelayedDelete">
            <summary>
            Detaches the control from canvas and adds to the deletion queue (processed in Canvas.DoThink).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.GetCanvas">
            <summary>
            Gets the canvas (root parent) of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.Base.Enable">
            <summary>
            Enables the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Disable">
            <summary>
            Disables the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.DefaultAcceleratorHandler(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Default accelerator handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Hide">
            <summary>
            Hides the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Show">
            <summary>
            Shows the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.SetToolTipText(System.String)">
            <summary>
            Creates a tooltip for the control.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:Gwen.Control.Base.InvalidateChildren(System.Boolean)">
            <summary>
            Invalidates the control's children (relayout/repaint).
            </summary>
            <param name="recursive">Determines whether the operation should be carried recursively.</param>
        </member>
        <member name="M:Gwen.Control.Base.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
            <remarks>
            Causes layout, repaint, invalidates cached texture.
            </remarks>
        </member>
        <member name="M:Gwen.Control.Base.SendToBack">
            <summary>
            Sends the control to the bottom of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.BringToFront">
            <summary>
            Brings the control to the top of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.FindChildByName(System.String,System.Boolean)">
            <summary>
            Finds a child by name.
            </summary>
            <param name="name">Child name.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="M:Gwen.Control.Base.AddChild(Gwen.Control.Base)">
            <summary>
            Attaches specified control as a child of this one.
            </summary>
            <remarks>
            If InnerPanel is not null, it will become the parent.
            </remarks>
            <param name="child">Control to be added as a child.</param>
        </member>
        <member name="M:Gwen.Control.Base.RemoveChild(Gwen.Control.Base,System.Boolean)">
            <summary>
            Detaches specified control from this one.
            </summary>
            <param name="child">Child to be removed.</param>
            <param name="dispose">Determines whether the child should be disposed (added to delayed delete queue).</param>
        </member>
        <member name="M:Gwen.Control.Base.DeleteAllChildren">
            <summary>
            Removes all children (and disposes them).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnChildAdded(Gwen.Control.Base)">
            <summary>
            Handler invoked when a child is added.
            </summary>
            <param name="child">Child added.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnChildRemoved(Gwen.Control.Base)">
            <summary>
            Handler invoked when a child is removed.
            </summary>
            <param name="child">Child removed.</param>
        </member>
        <member name="M:Gwen.Control.Base.MoveBy(System.Int32,System.Int32)">
            <summary>
            Moves the control by a specific amount.
            </summary>
            <param name="x">X-axis movement.</param>
            <param name="y">Y-axis movement.</param>
        </member>
        <member name="M:Gwen.Control.Base.MoveTo(System.Single,System.Single)">
            <summary>
            Moves the control to a specific point.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the control to a specific point, clamping on paren't bounds if RestrictToParent is set.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the control size.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Gwen.Control.Base.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="bounds">New bounds.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Gwen.Control.Base.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Gwen.Control.Base.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Gwen.Control.Base.Position(Gwen.Pos,System.Int32,System.Int32)">
            <summary>
            Positions the control inside its parent.
            </summary>
            <param name="pos">Target position.</param>
            <param name="xpadding">X padding.</param>
            <param name="ypadding">Y padding.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnBoundsChanged(System.Drawing.Rectangle)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnScaleChanged">
            <summary>
            Handler invoked when control's scale changes.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnChildBoundsChanged(System.Drawing.Rectangle,Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.DoCacheRender(Gwen.Skin.Base,Gwen.Control.Base)">
            <summary>
            Renders the control to a cache using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="master">Root parent.</param>
        </member>
        <member name="M:Gwen.Control.Base.DoRender(Gwen.Skin.Base)">
            <summary>
            Rendering logic implementation.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.RenderRecursive(Gwen.Skin.Base,System.Drawing.Rectangle)">
            <summary>
            Recursive rendering logic.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="clipRect">Clipping rectangle.</param>
        </member>
        <member name="M:Gwen.Control.Base.SetSkin(Gwen.Skin.Base,System.Boolean)">
            <summary>
            Sets the control's skin.
            </summary>
            <param name="skin">New skin.</param>
            <param name="doChildren">Deterines whether to change children skin.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnSkinChanged(Gwen.Skin.Base)">
            <summary>
            Handler invoked when control's skin changes.
            </summary>
            <param name="newSkin">New skin.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseWheeled(System.Int32)">
            <summary>
            Invokes mouse wheeled event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes mouse moved event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes left mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes right mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Invokes left double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Invokes right double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseEntered">
            <summary>
            Handler invoked on mouse cursor entering control's bounds.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseEntered">
            <summary>
            Invokes mouse enter event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnMouseLeft">
            <summary>
            Handler invoked on mouse cursor leaving control's bounds.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.InputMouseLeft">
            <summary>
            Invokes mouse leave event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Focus">
            <summary>
            Focuses the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Blur">
            <summary>
            Unfocuses the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.Touch">
            <summary>
            Control has been clicked - invoked by input system. Windows use it to propagate activation.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.GetControlAt(System.Int32,System.Int32)">
            <summary>
            Gets a child by its coordinates.
            </summary>
            <param name="x">Child X.</param>
            <param name="y">Child Y.</param>
            <returns>Control or null if not found.</returns>
        </member>
        <member name="M:Gwen.Control.Base.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.RecurseLayout(Gwen.Skin.Base)">
            <summary>
            Recursively lays out the control's interior according to alignment, margin, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.IsChild(Gwen.Control.Base)">
            <summary>
            Checks if the given control is a child of this instance.
            </summary>
            <param name="child">Control to examine.</param>
            <returns>True if the control is out child.</returns>
        </member>
        <member name="M:Gwen.Control.Base.LocalPosToCanvas(System.Drawing.Point)">
            <summary>
            Converts local coordinates to canvas coordinates.
            </summary>
            <param name="pnt">Local coordinates.</param>
            <returns>Canvas coordinates.</returns>
        </member>
        <member name="M:Gwen.Control.Base.CanvasPosToLocal(System.Drawing.Point)">
            <summary>
            Converts canvas coordinates to local coordinates.
            </summary>
            <param name="pnt">Canvas coordinates.</param>
            <returns>Local coordinates.</returns>
        </member>
        <member name="M:Gwen.Control.Base.CloseMenus">
            <summary>
            Closes all menus recursively.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.UpdateRenderBounds">
            <summary>
            Copies Bounds to RenderBounds.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.UpdateCursor">
            <summary>
            Sets mouse cursor to current cursor.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.SizeToChildren(System.Boolean,System.Boolean)">
            <summary>
            Resizes the control to fit its children.
            </summary>
            <param name="width">Determines whether to change control's width.</param>
            <param name="height">Determines whether to change control's height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Gwen.Control.Base.GetChildrenSize">
            <summary>
            Returns the total width and height of all children.
            </summary>
            <remarks>Default implementation returns maximum size of children since the layout is unknown.
            Implement this in derived compound controls to properly return their size.</remarks>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.Base.HandleAccelerator(System.String)">
            <summary>
            Handles keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.AddAccelerator(System.String,Gwen.Control.Base.GwenEventHandler{System.EventArgs})">
            <summary>
            Adds keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <param name="handler">Handler.</param>
        </member>
        <member name="M:Gwen.Control.Base.AddAccelerator(System.String)">
            <summary>
            Adds keyboard accelerator with a default handler.
            </summary>
            <param name="accelerator">Accelerator text.</param>
        </member>
        <member name="M:Gwen.Control.Base.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
            <remarks>
            Used in composite controls like lists to differentiate row colors etc.
            </remarks>
        </member>
        <member name="M:Gwen.Control.Base.InvalidateParent">
            <summary>
            Invalidates control's parent.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyPressed(Gwen.Key,System.Boolean)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.InputKeyPressed(Gwen.Key,System.Boolean)">
            <summary>
            Invokes key press event (used by input system).
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyReleaseed(Gwen.Key)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyTab(System.Boolean)">
            <summary>
            Handler for Tab keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyEscape(System.Boolean)">
            <summary>
            Handler for Escape keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Base.OnPaste(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnCopy(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnCut(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.Base.OnSelectAll(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.Base.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.RenderUnder(Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.RenderOver(Gwen.Skin.Base)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Base.Think">
            <summary>
            Called during rendering.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnKeyboardFocus">
            <summary>
            Handler for gaining keyboard focus.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnLostKeyboardFocus">
            <summary>
            Handler for losing keyboard focus.
            </summary>
        </member>
        <member name="M:Gwen.Control.Base.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="T:Gwen.Control.ScrollBar">
            <summary>
            Base class for scrollbars.
            </summary>
        </member>
        <member name="E:Gwen.Control.ScrollBar.BarMoved">
            <summary>
            Invoked when the bar is moved.
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="M:Gwen.Control.ScrollBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Gwen.Control.ScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.ScrollBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ScrollBar.OnBarMoved(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Gwen.Control.Button">
            <summary>
            Button control.
            </summary>
        </member>
        <member name="E:Gwen.Control.Button.Pressed">
            <summary>
            Invoked when the button is pressed.
            </summary>
        </member>
        <member name="E:Gwen.Control.Button.Released">
            <summary>
            Invoked when the button is released.
            </summary>
        </member>
        <member name="E:Gwen.Control.Button.Toggled">
            <summary>
            Invoked when the button's toggle state has changed.
            </summary>
        </member>
        <member name="E:Gwen.Control.Button.ToggledOn">
            <summary>
            Invoked when the button's toggle state has changed to On.
            </summary>
        </member>
        <member name="E:Gwen.Control.Button.ToggledOff">
            <summary>
            Invoked when the button's toggle state has changed to Off.
            </summary>
        </member>
        <member name="P:Gwen.Control.Button.IsDepressed">
            <summary>
            Indicates whether the button is depressed.
            </summary>
        </member>
        <member name="P:Gwen.Control.Button.IsToggle">
            <summary>
            Indicates whether the button is toggleable.
            </summary>
        </member>
        <member name="P:Gwen.Control.Button.ToggleState">
            <summary>
            Determines the button's toggle state.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.#ctor(Gwen.Control.Base)">
            <summary>
            Control constructor.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Button.Toggle">
            <summary>
            Toggles the button.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.Press(Gwen.Control.Base)">
            <summary>
            "Clicks" the button.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Button.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.Button.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.SetImage(System.String,System.Boolean)">
            <summary>
            Sets the button's image.
            </summary>
            <param name="textureName">Texture name. Null to remove.</param>
            <param name="center">Determines whether the image should be centered.</param>
        </member>
        <member name="M:Gwen.Control.Button.SizeToContents">
            <summary>
            Sizes to contents.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Button.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Button.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="M:Gwen.Control.Button.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="T:Gwen.Control.Canvas">
            <summary>
            Canvas control. It should be the root parent for all other controls.
            </summary>
        </member>
        <member name="P:Gwen.Control.Canvas.Scale">
            <summary>
            Scale for rendering.
            </summary>
        </member>
        <member name="P:Gwen.Control.Canvas.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Gwen.Control.Canvas.NeedsRedraw">
            <summary>
            In most situations you will be rendering the canvas every frame. 
            But in some situations you will only want to render when there have been changes. 
            You can do this by checking NeedsRedraw.
            </summary>
        </member>
        <member name="M:Gwen.Control.Canvas.#ctor(Gwen.Skin.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Canvas"/> class.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Canvas.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Gwen.Control.Canvas.Initialize">
            <summary>
            Additional initialization (which is sometimes not appropriate in the constructor)
            </summary>
        </member>
        <member name="M:Gwen.Control.Canvas.RenderCanvas">
            <summary>
            Renders the canvas. Call in your rendering loop.
            </summary>
        </member>
        <member name="M:Gwen.Control.Canvas.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Canvas.OnBoundsChanged(System.Drawing.Rectangle)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Gwen.Control.Canvas.DoThink">
            <summary>
            Processes input and layout. Also purges delayed delete queue.
            </summary>
        </member>
        <member name="M:Gwen.Control.Canvas.AddDelayedDelete(Gwen.Control.Base)">
            <summary>
            Adds given control to the delete queue and detaches it from canvas. Don't call from Dispose, it modifies child list.
            </summary>
            <param name="control">Control to delete.</param>
        </member>
        <member name="M:Gwen.Control.Canvas.Input_MouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handles mouse movement events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Canvas.Input_MouseButton(System.Int32,System.Boolean)">
            <summary>
            Handles mouse button events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Canvas.Input_Key(Gwen.Key,System.Boolean)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Canvas.Input_Character(System.Char)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Control.Canvas.Input_MouseWheel(System.Int32)">
            <summary>
            Handles the mouse wheel events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="T:Gwen.Control.CheckBox">
            <summary>
            CheckBox control.
            </summary>
        </member>
        <member name="P:Gwen.Control.CheckBox.IsChecked">
            <summary>
            Indicates whether the checkbox is checked.
            </summary>
        </member>
        <member name="M:Gwen.Control.CheckBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.CheckBox.Toggle">
            <summary>
            Toggles the checkbox.
            </summary>
        </member>
        <member name="E:Gwen.Control.CheckBox.Checked">
            <summary>
            Invoked when the checkbox has been checked.
            </summary>
        </member>
        <member name="E:Gwen.Control.CheckBox.UnChecked">
            <summary>
            Invoked when the checkbox has been unchecked.
            </summary>
        </member>
        <member name="E:Gwen.Control.CheckBox.CheckChanged">
            <summary>
            Invoked when the checkbox state has been changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.CheckBox.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="M:Gwen.Control.CheckBox.OnCheckChanged">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Gwen.Control.CheckBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.CheckBox.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="T:Gwen.Control.ColorLerpBox">
            <summary>
            Linear-interpolated HSV color box.
            </summary>
        </member>
        <member name="E:Gwen.Control.ColorLerpBox.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ColorLerpBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.Lerp(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Linear color interpolation.
            </summary>
        </member>
        <member name="P:Gwen.Control.ColorLerpBox.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.SetColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="value">Value to set.</param>
            <param name="onlyHue">Deetrmines whether to only set H value (not SV).</param>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.GetColorAt(System.Int32,System.Int32)">
            <summary>
            Gets the color from specified coordinates.
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorLerpBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.ColorSlider">
            <summary>
            HSV hue selector.
            </summary>
        </member>
        <member name="E:Gwen.Control.ColorSlider.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorSlider.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ColorSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ColorSlider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Control.ColorSlider.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ColorSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.ColorSlider.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="P:Gwen.Control.ColorSlider.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="T:Gwen.Control.CrossSplitter">
            <summary>
            Splitter control.
            </summary>
        </member>
        <member name="E:Gwen.Control.CrossSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Gwen.Control.CrossSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Gwen.Control.CrossSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="P:Gwen.Control.CrossSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Gwen.Control.CrossSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Gwen.Control.CrossSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.SetPanel(System.Int32,Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Gwen.Control.CrossSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Gwen.Control.GroupBox">
            <summary>
            Group box (container).
            </summary>
            <remarks>Don't use autosize with docking.</remarks>
        </member>
        <member name="M:Gwen.Control.GroupBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.GroupBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.GroupBox.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.GroupBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.GroupBox.SizeToContents">
            <summary>
            Sizes to contents.
            </summary>
        </member>
        <member name="T:Gwen.Control.HorizontalSlider">
            <summary>
            Horizontal slider.
            </summary>
        </member>
        <member name="M:Gwen.Control.HorizontalSlider.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.HorizontalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSlider.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSlider.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.HSVColorPicker">
            <summary>
            HSV color picker with "before" and "after" color boxes.
            </summary>
        </member>
        <member name="E:Gwen.Control.HSVColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.HSVColorPicker.DefaultColor">
            <summary>
            The "before" color.
            </summary>
        </member>
        <member name="P:Gwen.Control.HSVColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="M:Gwen.Control.HSVColorPicker.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.HSVColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.HSVColorPicker.SetColor(System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="color">Color to set.</param>
            <param name="onlyHue">Determines whether only the hue should be set.</param>
            <param name="reset">Determines whether the "before" color should be set as well.</param>
        </member>
        <member name="T:Gwen.Control.LabeledCheckBox">
            <summary>
            CheckBox with label.
            </summary>
        </member>
        <member name="E:Gwen.Control.LabeledCheckBox.Checked">
            <summary>
            Invoked when the control has been checked.
            </summary>
        </member>
        <member name="E:Gwen.Control.LabeledCheckBox.UnChecked">
            <summary>
            Invoked when the control has been unchecked.
            </summary>
        </member>
        <member name="E:Gwen.Control.LabeledCheckBox.CheckChanged">
            <summary>
            Invoked when the control's check has been changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.LabeledCheckBox.IsChecked">
            <summary>
            Indicates whether the control is checked.
            </summary>
        </member>
        <member name="P:Gwen.Control.LabeledCheckBox.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="M:Gwen.Control.LabeledCheckBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.LabeledCheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.LabeledCheckBox.OnCheckChanged(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Gwen.Control.LabeledCheckBox.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="T:Gwen.Control.ComboBox">
            <summary>
            ComboBox control.
            </summary>
        </member>
        <member name="E:Gwen.Control.ComboBox.ItemSelected">
            <summary>
            Invoked when the selected item has changed.
            </summary>
        </member>
        <member name="P:Gwen.Control.ComboBox.IsOpen">
            <summary>
            Indicates whether the combo menu is open.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ComboBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Gwen.Control.ComboBox.SelectedItem">
            <summary>
            Selected item.
            </summary>
            <remarks>Not just String property, because items also have internal names.</remarks>
        </member>
        <member name="M:Gwen.Control.ComboBox.AddItem(System.String,System.String,System.Object)">
            <summary>
            Adds a new item.
            </summary>
            <param name="label">Item label (displayed).</param>
            <param name="name">Item name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.ComboBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal Pressed implementation.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.DeleteAll">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnItemSelected(Gwen.Control.Base,Gwen.Control.ItemSelectedEventArgs)">
            <summary>
            Internal handler for item selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnLostKeyboardFocus">
            <summary>
            Handler for losing keyboard focus.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnKeyboardFocus">
            <summary>
            Handler for gaining keyboard focus.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.Open">
            <summary>
            Opens the combo.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.Close">
            <summary>
            Closes the combo.
            </summary>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.ComboBox.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.ComboBox.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.SelectByText(System.String)">
            <summary>
            Selects the first menu item with the given text it finds. 
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="label">The label to look for, this is what is shown to the user.</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.SelectByName(System.String)">
            <summary>
            Selects the first menu item with the given internal name it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="name">The internal name to look for. To select by what is displayed to the user, use "SelectByText".</param>
        </member>
        <member name="M:Gwen.Control.ComboBox.SelectByUserData(System.Object)">
            <summary>
            Selects the first menu item with the given user data it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="userdata">The UserData to look for. The equivalency check uses "param.Equals(item.UserData)".
            If null is passed in, it will look for null/unset UserData.</param>
        </member>
        <member name="T:Gwen.Control.HorizontalScrollBar">
            <summary>
            Horizontal scrollbar.
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="M:Gwen.Control.HorizontalScrollBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.HorizontalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalScrollBar.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>
            True if control state changed.
            </returns>
        </member>
        <member name="M:Gwen.Control.HorizontalScrollBar.OnBarMoved(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="T:Gwen.Control.ImagePanel">
            <summary>
            Image container.
            </summary>
        </member>
        <member name="M:Gwen.Control.ImagePanel.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ImagePanel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ImagePanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Control.ImagePanel.SetUV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the texture coordinates of the image.
            </summary>
        </member>
        <member name="P:Gwen.Control.ImagePanel.ImageName">
            <summary>
            Texture name.
            </summary>
        </member>
        <member name="M:Gwen.Control.ImagePanel.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ImagePanel.SizeToContents">
            <summary>
            Sizes the control to its contents.
            </summary>
        </member>
        <member name="M:Gwen.Control.ImagePanel.Touch">
            <summary>
            Control has been clicked - invoked by input system. Windows use it to propagate activation.
            </summary>
        </member>
        <member name="M:Gwen.Control.ImagePanel.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="T:Gwen.Control.Label">
            <summary>
            Static text label.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.Alignment">
            <summary>
            Text alignment.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextColorOverride">
            <summary>
            Override text color (used by tooltips).
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextWidth">
            <summary>
            Width of the text (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextHeight">
            <summary>
            Height of the text (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextLength">
            <summary>
            Text length (in characters).
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.AutoSizeToContents">
            <summary>
            Determines if the control should autosize to its text.
            </summary>
        </member>
        <member name="P:Gwen.Control.Label.TextPadding">
            <summary>
            Text padding.
            </summary>
        </member>
        <member name="M:Gwen.Control.Label.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Label"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Label.GetClosestCharacter(System.Int32,System.Int32)">
            <summary>
            Returns index of the character closest to specified point (in canvas coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.Label.SetTextPosition(System.Int32,System.Int32)">
            <summary>
            Sets the position of the internal text control.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Gwen.Control.Label.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.Label.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Label.SetText(System.String,System.Boolean)">
            <summary>
            Sets the label text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Gwen.Control.Label.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character coordinates (local).</returns>
        </member>
        <member name="M:Gwen.Control.Label.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.LabeledRadioButton">
            <summary>
            RadioButton with label.
            </summary>
        </member>
        <member name="P:Gwen.Control.LabeledRadioButton.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="M:Gwen.Control.LabeledRadioButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.LabeledRadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.LabeledRadioButton.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.LabeledRadioButton.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.LabeledRadioButton.Select">
            <summary>
            Selects the radio button.
            </summary>
        </member>
        <member name="T:Gwen.Control.ListBox">
            <summary>
            ListBox control.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.AllowMultiSelect">
            <summary>
            Determines whether multiple rows can be selected at once.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.IsToggle">
            <summary>
            Determines whether rows can be unselected by clicking on them again.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.RowCount">
            <summary>
            Number of rows in the list box.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.Item(System.Int32)">
            <summary>
            Returns specific row of the ListBox.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="P:Gwen.Control.ListBox.SelectedRows">
            <summary>
            List of selected rows.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.SelectedRow">
            <summary>
            First selected row (and only if list is not multiselectable).
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.SelectedRowIndex">
            <summary>
            Gets the selected row number.
            </summary>
        </member>
        <member name="P:Gwen.Control.ListBox.ColumnCount">
            <summary>
            Column count of table rows.
            </summary>
        </member>
        <member name="E:Gwen.Control.ListBox.RowSelected">
            <summary>
            Invoked when a row has been selected.
            </summary>
        </member>
        <member name="E:Gwen.Control.ListBox.RowUnselected">
            <summary>
            Invoked whan a row has beed unselected.
            </summary>
        </member>
        <member name="M:Gwen.Control.ListBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ListBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectRow(System.Int32,System.Boolean)">
            <summary>
            Selects the specified row by index.
            </summary>
            <param name="index">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectRows(System.String,System.Boolean)">
            <summary>
            Selects the specified row(s) by text.
            </summary>
            <param name="rowText">Text to search for (exact match).</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectRowsByRegex(System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            Selects the specified row(s) by regex text search.
            </summary>
            <param name="pattern">Regex pattern to search for.</param>
            <param name="regexOptions">Regex options.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectRow(Gwen.Control.Base,System.Boolean)">
            <summary>
            Slelects the specified row.
            </summary>
            <param name="control">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.RemoveAllRows">
            <summary>
            Removes the all rows from the ListBox
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.RemoveRow(System.Int32)">
            <summary>
            Removes the specified row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.AddRow(System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.ListBox.AddRow(System.String,System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <param name="name">Internal control name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.ListBox.AddRow(System.String,System.String,System.Object)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <param name="name">Internal control name.</param>
            <param name="UserData">User data for newly created row</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.ListBox.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.UnselectAll">
            <summary>
            Deselects all rows.
            </summary>
        </member>
        <member name="M:Gwen.Control.ListBox.UnselectRow(Gwen.Control.ListBoxRow)">
            <summary>
            Unselects the specified row.
            </summary>
            <param name="row">Row to unselect.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.OnRowSelected(Gwen.Control.Base,Gwen.Control.ItemSelectedEventArgs)">
            <summary>
            Handler for the row selection event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.Clear">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectByText(System.String)">
            <summary>
            Selects the first menu item with the given text it finds. 
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="label">The label to look for, this is what is shown to the user.</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectByName(System.String)">
            <summary>
            Selects the first menu item with the given internal name it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="name">The internal name to look for. To select by what is displayed to the user, use "SelectByText".</param>
        </member>
        <member name="M:Gwen.Control.ListBox.SelectByUserData(System.Object)">
            <summary>
            Selects the first menu item with the given user data it finds.
            If a menu item can not be found that matches input, nothing happens.
            </summary>
            <param name="userdata">The UserData to look for. The equivalency check uses "param.Equals(item.UserData)".
            If null is passed in, it will look for null/unset UserData.</param>
        </member>
        <member name="T:Gwen.Control.ListBoxRow">
            <summary>
            List box row (selectable).
            </summary>
        </member>
        <member name="M:Gwen.Control.ListBoxRow.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ListBoxRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="P:Gwen.Control.ListBoxRow.IsSelected">
            <summary>
            Indicates whether the control is selected.
            </summary>
        </member>
        <member name="M:Gwen.Control.ListBoxRow.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ListBoxRow.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="T:Gwen.Control.Menu">
            <summary>
            Popup menu.
            </summary>
        </member>
        <member name="P:Gwen.Control.Menu.DeleteOnClose">
            <summary>
            Determines whether the menu should be disposed on close.
            </summary>
        </member>
        <member name="P:Gwen.Control.Menu.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="M:Gwen.Control.Menu.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Menu"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Menu.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Menu.RenderUnder(Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Menu.Open(Gwen.Pos)">
            <summary>
             Opens the menu.
            </summary>
            <param name="pos">Unused.</param>
        </member>
        <member name="M:Gwen.Control.Menu.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.Menu.AddItem(System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.Menu.AddItem(System.String,System.String,System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <param name="iconName">Icon texture name.</param>
            <param name="accelerator">Accelerator for this item.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.Menu.OnAddItem(Gwen.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="M:Gwen.Control.Menu.CloseAll">
            <summary>
            Closes all submenus.
            </summary>
        </member>
        <member name="M:Gwen.Control.Menu.IsMenuOpen">
            <summary>
            Indicates whether any (sub)menu is open.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.Menu.OnHoverItem(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Mouse hover handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.Menu.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Gwen.Control.Menu.CloseMenus">
            <summary>
            Closes all submenus and the current menu.
            </summary>
        </member>
        <member name="M:Gwen.Control.Menu.AddDivider">
            <summary>
            Adds a divider menu item.
            </summary>
        </member>
        <member name="T:Gwen.Control.MenuItem">
            <summary>
            Menu item.
            </summary>
        </member>
        <member name="P:Gwen.Control.MenuItem.IsOnStrip">
            <summary>
            Indicates whether the item is on a menu strip.
            </summary>
        </member>
        <member name="P:Gwen.Control.MenuItem.IsCheckable">
            <summary>
            Determines if the menu item is checkable.
            </summary>
        </member>
        <member name="P:Gwen.Control.MenuItem.IsMenuOpen">
            <summary>
            Indicates if the parent menu is open.
            </summary>
        </member>
        <member name="P:Gwen.Control.MenuItem.IsChecked">
            <summary>
            Gets or sets the check value.
            </summary>
        </member>
        <member name="P:Gwen.Control.MenuItem.Menu">
            <summary>
            Gets the parent menu.
            </summary>
        </member>
        <member name="E:Gwen.Control.MenuItem.Selected">
            <summary>
            Invoked when the item is selected.
            </summary>
        </member>
        <member name="E:Gwen.Control.MenuItem.Checked">
            <summary>
            Invoked when the item is checked.
            </summary>
        </member>
        <member name="E:Gwen.Control.MenuItem.UnChecked">
            <summary>
            Invoked when the item is unchecked.
            </summary>
        </member>
        <member name="E:Gwen.Control.MenuItem.CheckChanged">
            <summary>
            Invoked when the item's check value is changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuItem.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.MenuItem"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.MenuItem.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.MenuItem.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.MenuItem.OnClicked(System.Int32,System.Int32)">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuItem.ToggleMenu">
            <summary>
            Toggles the menu open state.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuItem.OpenMenu">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuItem.CloseMenu">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="T:Gwen.Control.MenuStrip">
            <summary>
            Menu strip.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuStrip.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.MenuStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.MenuStrip.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuStrip.RenderUnder(Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.MenuStrip.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.MenuStrip.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Gwen.Control.MenuStrip.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="M:Gwen.Control.MenuStrip.OnAddItem(Gwen.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="T:Gwen.Control.NumericUpDown">
            <summary>
            Numeric up/down.
            </summary>
        </member>
        <member name="P:Gwen.Control.NumericUpDown.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Gwen.Control.NumericUpDown.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.NumericUpDown"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="E:Gwen.Control.NumericUpDown.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.OnButtonUp(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the button up event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.OnButtonDown(Gwen.Control.Base,Gwen.Control.ClickedEventArgs)">
            <summary>
            Handler for the button down event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.IsTextAllowed(System.String)">
            <summary>
            Determines whether the text can be assighed to the control.
            </summary>
            <param name="str">Text to evaluate.</param>
            <returns>True if the text is allowed.</returns>
        </member>
        <member name="P:Gwen.Control.NumericUpDown.Value">
            <summary>
            Numeric value of the control.
            </summary>
        </member>
        <member name="M:Gwen.Control.NumericUpDown.OnTextChanged">
            <summary>
            Handler for the text changed event.
            </summary>
        </member>
        <member name="T:Gwen.Control.RadioButton">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="P:Gwen.Control.RadioButton.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="M:Gwen.Control.RadioButton.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.RadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.RadioButton.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.RadioButtonGroup">
            <summary>
            Radio button group.
            </summary>
        </member>
        <member name="P:Gwen.Control.RadioButtonGroup.Selected">
            <summary>
            Selected radio button.
            </summary>
        </member>
        <member name="P:Gwen.Control.RadioButtonGroup.SelectedName">
            <summary>
            Internal name of the selected radio button.
            </summary>
        </member>
        <member name="P:Gwen.Control.RadioButtonGroup.SelectedLabel">
            <summary>
            Text of the selected radio button.
            </summary>
        </member>
        <member name="P:Gwen.Control.RadioButtonGroup.SelectedIndex">
            <summary>
            Index of the selected radio button.
            </summary>
        </member>
        <member name="E:Gwen.Control.RadioButtonGroup.SelectionChanged">
            <summary>
            Invoked when the selected option has changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.RadioButtonGroup.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.RadioButtonGroup"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="label">Label for the outlining GroupBox.</param>
        </member>
        <member name="M:Gwen.Control.RadioButtonGroup.AddOption(System.String)">
            <summary>
            Adds a new option.
            </summary>
            <param name="text">Option text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.RadioButtonGroup.AddOption(System.String,System.String)">
            <summary>
            Adds a new option.
            </summary>
            <param name="text">Option text.</param>
            <param name="optionName">Internal name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.RadioButtonGroup.OnRadioClicked(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the option change.
            </summary>
            <param name="fromPanel">Event source.</param>
        </member>
        <member name="M:Gwen.Control.RadioButtonGroup.SetSelection(System.Int32)">
            <summary>
            Selects the specified option.
            </summary>
            <param name="index">Option to select.</param>
        </member>
        <member name="T:Gwen.Control.ScrollControl">
            <summary>
            Base for controls whose interior can be scrolled.
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollControl.CanScrollH">
            <summary>
            Indicates whether the control can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollControl.CanScrollV">
            <summary>
            Indicates whether the control can be scrolled vertically.
            </summary>
        </member>
        <member name="P:Gwen.Control.ScrollControl.AutoHideBars">
            <summary>
            Determines whether the scroll bars should be hidden if not needed.
            </summary>
        </member>
        <member name="M:Gwen.Control.ScrollControl.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.ScrollControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.ScrollControl.EnableScroll(System.Boolean,System.Boolean)">
            <summary>
            Enables or disables inner scrollbars.
            </summary>
            <param name="horizontal">Determines whether the horizontal scrollbar should be enabled.</param>
            <param name="vertical">Determines whether the vertical scrollbar should be enabled.</param>
        </member>
        <member name="M:Gwen.Control.ScrollControl.OnChildBoundsChanged(System.Drawing.Rectangle,Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
            <param name="oldChildBounds"></param>
            <param name="child"></param>
        </member>
        <member name="M:Gwen.Control.ScrollControl.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.ScrollControl.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
            <returns></returns>
        </member>
        <member name="M:Gwen.Control.ScrollControl.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.Slider">
            <summary>
            Base slider.
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.NotchCount">
            <summary>
            Number of notches on the slider axis.
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.SnapToNotches">
            <summary>
            Determines whether the slider should snap to notches. Sets DrawNotches to true if this is set to true
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.DrawNotches">
            <summary>
            Determines whether the slider notches should be drawn. Automatically set to true when SnapToNotches is true
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="P:Gwen.Control.Slider.Value">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="E:Gwen.Control.Slider.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.Slider.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.Slider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.Slider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.Slider.SetRange(System.Single,System.Single)">
            <summary>
            Sets the value range.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Gwen.Control.Slider.SetNotchSpacing(System.Int32)">
            <summary>
            Helper method to set the notch spacing. Enables drawing and snapping of notches
            The total range must be an integer multiple of notch spacing
            </summary>
            <param name="spacing">Notch spacing</param>
        </member>
        <member name="M:Gwen.Control.Slider.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.TabControl">
            <summary>
            Control with multiple tabs that can be reordered and dragged.
            </summary>
        </member>
        <member name="E:Gwen.Control.TabControl.TabAdded">
            <summary>
            Invoked when a tab has been added.
            </summary>
        </member>
        <member name="E:Gwen.Control.TabControl.TabRemoved">
            <summary>
            Invoked when a tab has been removed.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabControl.AllowReorder">
            <summary>
            Determines if tabs can be reordered by dragging.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabControl.CurrentButton">
            <summary>
            Currently active tab button.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabControl.TabStripPosition">
            <summary>
            Current tab strip position.
            </summary>
        </member>
        <member name="P:Gwen.Control.TabControl.TabStrip">
            <summary>
            Tab strip.
            </summary>
        </member>
        <member name="M:Gwen.Control.TabControl.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TabControl.AddPage(System.String,Gwen.Control.Base)">
            <summary>
            Adds a new page/tab.
            </summary>
            <param name="label">Tab label.</param>
            <param name="page">Page contents.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.TabControl.AddPage(Gwen.Control.TabButton)">
            <summary>
            Adds a page/tab.
            </summary>
            <param name="button">Page to add. (well, it's a TabButton which is a parent to the page).</param>
        </member>
        <member name="M:Gwen.Control.TabControl.OnTabPressed(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for tab selection.
            </summary>
            <param name="control">Event source (TabButton).</param>
        </member>
        <member name="M:Gwen.Control.TabControl.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TabControl.OnLoseTab(Gwen.Control.TabButton)">
            <summary>
            Handler for tab removing.
            </summary>
            <param name="button"></param>
        </member>
        <member name="P:Gwen.Control.TabControl.TabCount">
            <summary>
            Number of tabs in the control.
            </summary>
        </member>
        <member name="T:Gwen.Control.TabTitleBar">
            <summary>
            Titlebar for DockedTabControl.
            </summary>
        </member>
        <member name="M:Gwen.Control.TabTitleBar.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Control.TextBox">
            <summary>
            Text box (editable).
            </summary>
        </member>
        <member name="P:Gwen.Control.TextBox.SelectAllOnFocus">
            <summary>
            Determines whether text should be selected when the control is focused.
            </summary>
        </member>
        <member name="P:Gwen.Control.TextBox.HasSelection">
            <summary>
            Indicates whether the text has active selection.
            </summary>
        </member>
        <member name="E:Gwen.Control.TextBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="E:Gwen.Control.TextBox.SubmitPressed">
            <summary>
            Invoked when the submit key has been pressed.
            </summary>
        </member>
        <member name="P:Gwen.Control.TextBox.CursorPos">
            <summary>
            Current cursor position (character index).
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBox.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:Gwen.Control.TextBox.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TextBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBox.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.InsertText(System.String)">
            <summary>
            Inserts text at current cursor position, erasing selection if any.
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnPaste(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnCopy(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnCut(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnSelectAll(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Gwen.Control.TextBox.GetSelection">
            <summary>
            Returns currently selected text.
            </summary>
            <returns>Current selection.</returns>
        </member>
        <member name="M:Gwen.Control.TextBox.DeleteText(System.Int32,System.Int32)">
            <summary>
            Deletes text.
            </summary>
            <param name="startPos">Starting cursor position.</param>
            <param name="length">Length in characters.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.EraseSelection">
            <summary>
            Deletes selected text.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TextBox.OnReturn">
            <summary>
            Handler for the return key.
            </summary>
        </member>
        <member name="T:Gwen.Control.TextBoxNumeric">
            <summary>
            Numeric text box - accepts only float numbers.
            </summary>
        </member>
        <member name="F:Gwen.Control.TextBoxNumeric.m_Value">
            <summary>
            Current numeric value.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBoxNumeric.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TextBoxNumeric"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TextBoxNumeric.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="P:Gwen.Control.TextBoxNumeric.Value">
            <summary>
            Current numerical value.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBoxNumeric.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBoxNumeric.SetText(System.String,System.Boolean)">
            <summary>
            Sets the control text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="T:Gwen.Control.TextBoxPassword">
            <summary>
            Text box with masked text.
            </summary>
            <remarks>
            This class doesn't prevent programatic access to the text in any way.
            </remarks>
        </member>
        <member name="P:Gwen.Control.TextBoxPassword.MaskCharacter">
            <summary>
            Character used in place of actual characters for display.
            </summary>
        </member>
        <member name="M:Gwen.Control.TextBoxPassword.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TextBoxPassword"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TextBoxPassword.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="T:Gwen.Control.TreeControl">
            <summary>
            Tree control.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeControl.AllowMultiSelect">
            <summary>
            Determines if multiple nodes can be selected at the same time.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeControl.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TreeControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TreeControl.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TreeControl.OnChildBoundsChanged(System.Drawing.Rectangle,Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
            <param name="oldChildBounds"></param>
            <param name="child"></param>
        </member>
        <member name="M:Gwen.Control.TreeControl.RemoveAll">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeControl.OnNodeAdded(Gwen.Control.TreeNode)">
            <summary>
            Handler for node added event.
            </summary>
            <param name="node">Node added.</param>
        </member>
        <member name="M:Gwen.Control.TreeControl.OnNodeSelected(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for node selected event.
            </summary>
            <param name="Control">Node selected.</param>
        </member>
        <member name="T:Gwen.Control.TreeNode">
            <summary>
            Tree control node.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeNode.IsRoot">
            <summary>
            Indicates whether this is a root node.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeNode.TreeControl">
            <summary>
            Parent tree control.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeNode.IsSelectable">
            <summary>
            Determines whether the node is selectable.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeNode.IsSelected">
            <summary>
            Indicates whether the node is selected.
            </summary>
        </member>
        <member name="P:Gwen.Control.TreeNode.Text">
            <summary>
            Node's label.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.LabelPressed">
            <summary>
            Invoked when the node label has been pressed.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.SelectionChanged">
            <summary>
            Invoked when the node's selected state has changed.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.Selected">
            <summary>
            Invoked when the node has been selected.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.Unselected">
            <summary>
            Invoked when the node has been unselected.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.Expanded">
            <summary>
            Invoked when the node has been expanded.
            </summary>
        </member>
        <member name="E:Gwen.Control.TreeNode.Collapsed">
            <summary>
            Invoked when the node has been collapsed.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeNode.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.TreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.PostLayout(Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.AddNode(System.String)">
            <summary>
            Adds a new child node.
            </summary>
            <param name="label">Node's label.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Gwen.Control.TreeNode.Open">
            <summary>
            Opens the node.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeNode.Close">
            <summary>
            Closes the node.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeNode.ExpandAll">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeNode.UnselectAll">
            <summary>
            Clears the selection on the node and all child nodes.
            </summary>
        </member>
        <member name="M:Gwen.Control.TreeNode.OnToggleButtonPress(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the toggle button.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.OnDoubleClickName(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for label double click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Gwen.Control.TreeNode.OnClickName(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for label click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="T:Gwen.Control.VerticalScrollBar">
            <summary>
            Vertical scrollbar.
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Gwen.Control.VerticalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="M:Gwen.Control.VerticalScrollBar.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.VerticalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.VerticalScrollBar.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.VerticalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.VerticalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Gwen.Control.VerticalScrollBar.OnBarMoved(Gwen.Control.Base,System.EventArgs)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="T:Gwen.Control.VerticalSlider">
            <summary>
            Vertical slider.
            </summary>
        </member>
        <member name="M:Gwen.Control.VerticalSlider.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.VerticalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSlider.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.VerticalSlider.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="E:Gwen.Control.HorizontalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Gwen.Control.HorizontalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Gwen.Control.HorizontalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.#ctor(Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Gwen.Control.HorizontalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.Layout(Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.SetPanel(System.Int32,Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Gwen.Control.HorizontalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="T:Gwen.Control.WindowControl">
            <summary>
            Movable window with title bar.
            </summary>
        </member>
        <member name="P:Gwen.Control.WindowControl.Title">
            <summary>
            Window caption.
            </summary>
        </member>
        <member name="P:Gwen.Control.WindowControl.IsClosable">
            <summary>
            Determines whether the window has close button.
            </summary>
        </member>
        <member name="P:Gwen.Control.WindowControl.DeleteOnClose">
            <summary>
            Determines whether the control should be disposed on close.
            </summary>
        </member>
        <member name="P:Gwen.Control.WindowControl.IsHidden">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="M:Gwen.Control.WindowControl.#ctor(Gwen.Control.Base,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Control.WindowControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="caption">Window caption.</param>
            <param name="modal">Determines whether the window should be modal.</param>
        </member>
        <member name="M:Gwen.Control.WindowControl.MakeModal(System.Boolean)">
            <summary>
            Makes the window modal: covers the whole canvas and gets all input.
            </summary>
            <param name="dim">Determines whether all the background should be dimmed.</param>
        </member>
        <member name="P:Gwen.Control.WindowControl.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="M:Gwen.Control.WindowControl.Render(Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.WindowControl.RenderUnder(Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Gwen.Control.WindowControl.RenderFocus(Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Gwen.Font">
            <summary>
            Represents font resource.
            </summary>
        </member>
        <member name="P:Gwen.Font.FaceName">
            <summary>
            Font face name. Exact meaning depends on renderer.
            </summary>
        </member>
        <member name="P:Gwen.Font.Size">
            <summary>
            Font size.
            </summary>
        </member>
        <member name="P:Gwen.Font.Smooth">
            <summary>
            Enables or disables font smoothing (default: disabled).
            </summary>
        </member>
        <member name="P:Gwen.Font.RendererData">
            <summary>
            This should be set by the renderer if it tries to use a font where it's null.
            </summary>
        </member>
        <member name="P:Gwen.Font.RealSize">
            <summary>
            This is the real font size, after it's been scaled by Renderer.Scale()
            </summary>
        </member>
        <member name="M:Gwen.Font.#ctor(Gwen.Renderer.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Font"/> class.
            </summary>
        </member>
        <member name="M:Gwen.Font.#ctor(Gwen.Renderer.Base,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Font"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="faceName">Face name.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="M:Gwen.Font.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Font.Copy">
            <summary>
            Duplicates font data (except renderer data which must be reinitialized).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Gwen.Input.InputHandler">
            <summary>
            Input handling.
            </summary>
        </member>
        <member name="F:Gwen.Input.InputHandler.HoveredControl">
            <summary>
            Control currently hovered by mouse.
            </summary>
        </member>
        <member name="F:Gwen.Input.InputHandler.KeyboardFocus">
            <summary>
            Control that corrently has keyboard focus.
            </summary>
        </member>
        <member name="F:Gwen.Input.InputHandler.MouseFocus">
            <summary>
            Control that currently has mouse focus.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.MaxMouseButtons">
            <summary>
            Maximum number of mouse buttons supported.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.DoubleClickSpeed">
            <summary>
            Maximum time in seconds between mouse clicks to be recognized as double click.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.KeyRepeatRate">
            <summary>
            Time in seconds between autorepeating of keys.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.KeyRepeatDelay">
            <summary>
            Time in seconds before key starts to autorepeat.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.IsLeftMouseDown">
            <summary>
            Indicates whether the left mouse button is down.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.IsRightMouseDown">
            <summary>
            Indicates whether the right mouse button is down.
            </summary>
        </member>
        <member name="F:Gwen.Input.InputHandler.MousePosition">
            <summary>
            Current mouse position.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.IsShiftDown">
            <summary>
            Indicates whether the shift key is down.
            </summary>
        </member>
        <member name="P:Gwen.Input.InputHandler.IsControlDown">
            <summary>
            Indicates whether the control key is down.
            </summary>
        </member>
        <member name="M:Gwen.Input.InputHandler.IsKeyDown(Gwen.Key)">
            <summary>
            Checks if the given key is pressed.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if the key is down.</returns>
        </member>
        <member name="M:Gwen.Input.InputHandler.DoSpecialKeys(Gwen.Control.Base,System.Char)">
            <summary>
            Handles copy, paste etc.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Gwen.Input.InputHandler.HandleAccelerator(Gwen.Control.Base,System.Char)">
            <summary>
            Handles accelerator input.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Gwen.Input.InputHandler.OnMouseMoved(Gwen.Control.Base,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mouse moved handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Gwen.Input.InputHandler.OnCanvasThink(Gwen.Control.Base)">
            <summary>
            Handles focus updating and key autorepeats.
            </summary>
            <param name="control">Unused.</param>
        </member>
        <member name="M:Gwen.Input.InputHandler.OnMouseClicked(Gwen.Control.Base,System.Int32,System.Boolean)">
            <summary>
            Mouse click handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="mouseButton">Mouse button number.</param>
            <param name="down">Specifies if the button is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Gwen.Input.InputHandler.OnKeyEvent(Gwen.Control.Base,Gwen.Key,System.Boolean)">
            <summary>
            Key handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="key">Key.</param>
            <param name="down">True if the key is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="T:Gwen.Input.KeyData">
            <summary>
            Keyboard state.
            </summary>
        </member>
        <member name="T:Gwen.Margin">
            <summary>
            Represents outer spacing.
            </summary>
        </member>
        <member name="T:Gwen.Padding">
            <summary>
            Represents inner spacing.
            </summary>
        </member>
        <member name="T:Gwen.Key">
            <summary>
            Key constants.
            </summary>
        </member>
        <member name="T:Gwen.Platform.Windows">
            <summary>
            Windows-specific utility functions.
            </summary>
        </member>
        <member name="M:Gwen.Platform.Windows.GetFontPath(System.String)">
            <summary>
            Gets a font file path from font name.
            </summary>
            <param name="fontName">Font name.</param>
            <returns>Font file path.</returns>
        </member>
        <member name="T:Gwen.Platform.Neutral">
            <summary>
            Platform-agnostic utility functions.
            </summary>
        </member>
        <member name="M:Gwen.Platform.Neutral.SetCursor(System.Windows.Forms.Cursor)">
            <summary>
            Changes the mouse cursor.
            </summary>
            <param name="cursor">Cursor type.</param>
        </member>
        <member name="M:Gwen.Platform.Neutral.GetClipboardText">
            <summary>
            Gets text from clipboard.
            </summary>
            <returns>Clipboard text.</returns>
        </member>
        <member name="M:Gwen.Platform.Neutral.SetClipboardText(System.String)">
            <summary>
            Sets the clipboard text.
            </summary>
            <param name="text">Text to set.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Gwen.Platform.Neutral.GetTimeInSeconds">
            <summary>
            Gets elapsed time since this class was initalized.
            </summary>
            <returns>Time interval in seconds.</returns>
        </member>
        <member name="M:Gwen.Platform.Neutral.FileOpen(System.String,System.String,System.String,System.Action{System.String})">
            <summary>
            Displays an open file dialog.
            </summary>
            <param name="title">Dialog title.</param>
            <param name="startPath">Initial path.</param>
            <param name="extension">File extension filter.</param>
            <param name="callback">Callback that is executed after the dialog completes.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Gwen.Platform.Neutral.FileSave(System.String,System.String,System.String,System.Action{System.String})">
            <summary>
            Displays a save file dialog.
            </summary>
            <param name="title">Dialog title.</param>
            <param name="startPath">Initial path.</param>
            <param name="extension">File extension filter.</param>
            <param name="callback">Callback that is executed after the dialog completes.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="T:Gwen.Pos">
            <summary>
            Represents relative position.
            </summary>
        </member>
        <member name="T:Gwen.Skin.SkinColors">
            <summary>
            UI colors used by skins.
            </summary>
        </member>
        <member name="T:Gwen.Skin.TexturedBase">
            <summary>
            Base textured skin.
            </summary>
        </member>
        <member name="M:Gwen.Skin.TexturedBase.#ctor(Gwen.Renderer.Base,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Skin.TexturedBase"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="textureName">Name of the skin texture map.</param>
        </member>
        <member name="M:Gwen.Skin.TexturedBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gwen.Skin.Texturing.Bordered">
            <summary>
            3x3 texture grid.
            </summary>
        </member>
        <member name="T:Gwen.Skin.Texturing.Single">
            <summary>
            Single textured element.
            </summary>
        </member>
        <member name="T:Gwen.Skin.Base">
            <summary>
            Base skin.
            </summary>
        </member>
        <member name="F:Gwen.Skin.Base.Colors">
            <summary>
            Colors of various UI elements.
            </summary>
        </member>
        <member name="P:Gwen.Skin.Base.DefaultFont">
            <summary>
            Default font to use when rendering text if none specified.
            </summary>
        </member>
        <member name="P:Gwen.Skin.Base.Renderer">
            <summary>
            Renderer used.
            </summary>
        </member>
        <member name="M:Gwen.Skin.Base.#ctor(Gwen.Renderer.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Skin.Base"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Gwen.Skin.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Gwen.Skin.Base.ReleaseFont(Gwen.Font)">
            <summary>
            Releases the specified font.
            </summary>
            <param name="font">Font to release.</param>
        </member>
        <member name="M:Gwen.Skin.Base.SetDefaultFont(System.String,System.Int32)">
            <summary>
            Sets the default text font.
            </summary>
            <param name="faceName">Font name. Meaning can vary depending on the renderer.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="T:Gwen.Texture">
            <summary>
            Represents a texture.
            </summary>
        </member>
        <member name="P:Gwen.Texture.Name">
            <summary>
            Texture name. Usually file name, but exact meaning depends on renderer.
            </summary>
        </member>
        <member name="P:Gwen.Texture.RendererData">
            <summary>
            Renderer data.
            </summary>
        </member>
        <member name="P:Gwen.Texture.Failed">
            <summary>
            Indicates that the texture failed to load.
            </summary>
        </member>
        <member name="P:Gwen.Texture.Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="P:Gwen.Texture.Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="M:Gwen.Texture.#ctor(Gwen.Renderer.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Texture"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Gwen.Texture.Load(System.String)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="name">Texture name.</param>
        </member>
        <member name="M:Gwen.Texture.LoadRaw(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes the texture from raw pixel data.
            </summary>
            <param name="width">Texture width.</param>
            <param name="height">Texture height.</param>
            <param name="pixelData">Color array in RGBA format.</param>
        </member>
        <member name="M:Gwen.Texture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Gwen.ToolTip">
            <summary>
            Tooltip handling.
            </summary>
        </member>
        <member name="M:Gwen.ToolTip.Enable(Gwen.Control.Base)">
            <summary>
            Enables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Gwen.ToolTip.Disable(Gwen.Control.Base)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Gwen.ToolTip.ControlDeleted(Gwen.Control.Base)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Gwen.ToolTip.RenderToolTip(Gwen.Skin.Base)">
            <summary>
            Renders the currently visible tooltip.
            </summary>
            <param name="skin"></param>
        </member>
        <member name="T:Gwen.DragDrop.DragAndDrop">
            <summary>
            Drag and drop handling.
            </summary>
        </member>
        <member name="T:Gwen.Renderer.Base">
            <summary>
            Base renderer.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Gwen.Renderer.Base"/> class.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Gwen.Renderer.Base.Begin">
            <summary>
            Starts rendering.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.End">
            <summary>
            Stops rendering.
            </summary>
        </member>
        <member name="P:Gwen.Renderer.Base.DrawColor">
            <summary>
            Gets or sets the current drawing color.
            </summary>
        </member>
        <member name="P:Gwen.Renderer.Base.RenderOffset">
            <summary>
            Rendering offset. No need to touch it usually.
            </summary>
        </member>
        <member name="P:Gwen.Renderer.Base.ClipRegion">
            <summary>
            Clipping rectangle.
            </summary>
        </member>
        <member name="P:Gwen.Renderer.Base.ClipRegionVisible">
            <summary>
            Indicates whether the clip region is visible.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawFilledRect(System.Drawing.Rectangle)">
            <summary>
            Draws a solid filled rectangle.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Gwen.Renderer.Base.StartClip">
            <summary>
            Starts clipping to the current clipping rectangle.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.EndClip">
            <summary>
            Stops clipping.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.LoadTexture(Gwen.Texture)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Gwen.Renderer.Base.LoadTextureRaw(Gwen.Texture,System.Byte[])">
            <summary>
            Initializes texture from raw pixel data.
            </summary>
            <param name="t">Texture to initialize. Dimensions need to be set.</param>
            <param name="pixelData">Pixel data in RGBA format.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.LoadTextureStream(Gwen.Texture,System.IO.Stream)">
            <summary>
            Initializes texture from image file data.
            </summary>
            <param name="t">Texture to initialize.</param>
            <param name="data">Image file as stream.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.FreeTexture(Gwen.Texture)">
            <summary>
            Frees the specified texture.
            </summary>
            <param name="t">Texture to free.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawTexturedRect(Gwen.Texture,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws textured rectangle.
            </summary>
            <param name="t">Texture to use.</param>
            <param name="targetRect">Rectangle bounds.</param>
            <param name="u1">Texture coordinate u1.</param>
            <param name="v1">Texture coordinate v1.</param>
            <param name="u2">Texture coordinate u2.</param>
            <param name="v2">Texture coordinate v2.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawMissingImage(System.Drawing.Rectangle)">
            <summary>
            Draws "missing image" default texture.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="P:Gwen.Renderer.Base.CTT">
            <summary>
            Cache to texture provider.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.LoadFont(Gwen.Font)">
            <summary>
            Loads the specified font.
            </summary>
            <param name="font">Font to load.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Gwen.Renderer.Base.FreeFont(Gwen.Font)">
            <summary>
            Frees the specified font.
            </summary>
            <param name="font">Font to free.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.InvalidateCachedText(Gwen.PrintedTextKey)">
            <summary>
            Invalidates the cached value for the specified text.
            Only used if the renderer uses a string caching mechanism
            </summary>
            <param name="key">The key to use for the cache dictionary</param>
        </member>
        <member name="M:Gwen.Renderer.Base.InvalidateCachedText(System.String)">
            <summary>
            Invalidates the cached value for the specified text.
            Only used if the renderer uses a string caching mechanism
            </summary>
            <param name="text">Text to render.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.InvalidateCachedText(System.String,System.Drawing.Color)">
            <summary>
            Invalidates the cached value for the specified text.
            Only used if the renderer uses a string caching mechanism 
            </summary>
            <param name="text">Text</param>
            <param name="color">Color of text</param>
        </member>
        <member name="M:Gwen.Renderer.Base.MeasureText(Gwen.Font,System.String)">
            <summary>
            Returns dimensions of the text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to measure.</param>
            <returns>Width and height of the rendered text.</returns>
        </member>
        <member name="M:Gwen.Renderer.Base.RenderText(Gwen.Font,System.Drawing.Point,Gwen.TextContainer)">
            <summary>
            Renders text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="position">Top-left corner of the text.</param>
            <param name="text">Text to render.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawLinedRect(System.Drawing.Rectangle)">
            <summary>
            Draws a lined rectangle. Used for keyboard focus overlay.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawPixel(System.Int32,System.Int32)">
            <summary>
            Draws a single pixel. Very slow, do not use. :P
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.PixelColor(Gwen.Texture,System.UInt32,System.UInt32)">
            <summary>
            Gets pixel color of a specified texture. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Gwen.Renderer.Base.PixelColor(Gwen.Texture,System.UInt32,System.UInt32,System.Drawing.Color)">
            <summary>
            Gets pixel color of a specified texture, returning default if otherwise failed. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="defaultColor">Color to return on failure.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Gwen.Renderer.Base.DrawShavedCornerRect(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a round-corner rectangle.
            </summary>
            <param name="rect">Target rectangle.</param>
            <param name="slight"></param>
        </member>
        <member name="M:Gwen.Renderer.Base.Translate(System.Int32@,System.Int32@)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Gwen.Renderer.Base.Translate(System.Drawing.Point)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.Translate(System.Drawing.Rectangle)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Gwen.Renderer.Base.AddRenderOffset(System.Drawing.Rectangle)">
            <summary>
            Adds a point to the render offset.
            </summary>
            <param name="offset">Point to add.</param>
        </member>
        <member name="M:Gwen.Renderer.Base.AddClipRegion(System.Drawing.Rectangle)">
            <summary>
            Adds a rectangle to the clipping region.
            </summary>
            <param name="rect">Rectangle to add.</param>
        </member>
        <member name="M:Gwen.Renderer.ICacheToTexture.SetupCacheTexture(Gwen.Control.Base)">
            <summary>
            Called to set the target up for rendering.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Gwen.Renderer.ICacheToTexture.FinishCacheTexture(Gwen.Control.Base)">
            <summary>
            Called when cached rendering is done.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Gwen.Renderer.ICacheToTexture.DrawCachedControlTexture(Gwen.Control.Base)">
            <summary>
            Called when gwen wants to draw the cached version of the control. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Gwen.Renderer.ICacheToTexture.CreateControlCacheTexture(Gwen.Control.Base)">
            <summary>
            Called to actually create a cached texture. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="T:Gwen.Util">
            <summary>
            Misc utility functions.
            </summary>
        </member>
        <member name="M:Gwen.Util.SplitAndKeep(System.String,System.String)">
            <summary>
            Splits a string but keeps the separators intact (at the end of split parts).
            </summary>
            <param name="text">String to split.</param>
            <param name="separators">Separator characters.</param>
            <returns>Split strings.</returns>
        </member>
    </members>
</doc>
